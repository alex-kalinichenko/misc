print(5, '=', bin(5)) # 5 в двоичном виде
print(6, '=', bin(6))

print('5 AND 6 =', 5 & 6, '=', bin(5), 'AND', bin(6), '=', bin(5 & 6))
print('Побитовое И (AND) используется для выключения битов. Любой бит, установленный\n'
      'в 0, вызывает установку соответствующего бита результата также в 0.\n')

print('5 OR 6 =', 5 | 6, '=', bin(5), 'OR', bin(6), '=', bin(5 | 6))
print('Побитовое ИЛИ (OR) используется для включения битов. Любой бит, установленный\n'
      'в 1, вызывает установку соответствующего бита результата также в 1.\n')

print('NOT 5 =', ~ 5, '=', 'NOT', bin(5), '=', bin(~5))
print(int(-0b110))
print('Побитовое НЕ (NOT) инвертирует состояние каждого бита исходной переменной.')

# Операторы сдвига << и >> сдвигают биты в переменной влево или вправо на
# указанное число. При этом на освободившиеся позиции устанавливаются нули
# (кроме сдвига вправо отрицательного числа, в этом случае на свободные позиции
# устанавливаются единицы, так как числа представляются в двоичном дополнительном
# коде и необходимо поддерживать знаковый бит).
print(10 >> 1)  # сдвиг вправо на 1 - это деление на 2
print(5 << 1)  # свиг влево на 1 - это умножение на 2

print(8 >> 2)  # сдвиг вправо на 2 - это деление на 4
print(5 << 2)  # свиг влево на 2 - это умножение на 4