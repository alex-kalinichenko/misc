# 1. Определение количества различных подстрок с использованием хеш-функции.
# Пусть на вход функции дана строка. Требуется вернуть количество различных
# подстрок в этой строке.
# Примечания:
# * в сумму не включаем пустую строку и строку целиком;
# * без использования функций для вычисления хэша (hash(), sha1() или любой
# другой из модуля hashlib задача считается не решённой.

import hashlib


def hash_count(string):
    assert len(string) > 0, 'Строка не может быть пустая'
    length = len(string)

    sub_string_set = set()

    # проходимся по циклу на 1 раз меньше чем кол-во симвовлов фразы
    # цикл нужен для изменения длины подстроки
    for i in range(length - 1):

        # определяем длину подстроки которой проходимся по строке (начало и конец)
        # на каждом цикле подстрока начинается с 0, а конец уменьшается на 1
        start = 0
        end = length - i - 1

        # print(f'Stage {i}: ') # для наглядности разделяем каждый проход цикла

        # идём по циклу смещая подстроку на 1
        # цикл нужен для прохода подстрокой по строке
        # и определния сколько подстрок в каждом цикле
        for j in range(i + 2):
            # print(string[start:end]) # просмотр подстроки

            # вычисление хэша
            hash_1 = hashlib.sha1(string[start:end].encode('utf-8')).hexdigest()
            # print(hash)
            sub_string_set.add(hash_1)  # добавляем хэш в множество
            start += 1
            end += 1

    # print(sub_string_set) # просмотр множества

    # кол-во элементов множества даёт кол-во уникальных хэшей и подстрок
    return len(sub_string_set)


# s = 'Hello world'
s = input('Введите строку: ')
print(hash_count(s))

