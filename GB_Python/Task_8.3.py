# 3) Создайте собственный класс-исключение, который должен проверять содержимое списка
# на наличие только чисел. Проверить работу исключения на реальном примере. Необходимо
# запрашивать у пользователя данные и заполнять список. Класс-исключение должен
# контролировать типы данных элементов списка.
# Примечание: длина списка не фиксирована. Элементы запрашиваются бесконечно, пока
# пользователь сам не остановит работу скрипта, введя, например, команду “stop”. При
# этом скрипт завершается, сформированный список выводится на экран.
# Подсказка: для данного задания примем, что пользователь может вводить только числа и
# строки. При вводе пользователем очередного элемента необходимо реализовать проверку
# типа элемента и вносить его в список, только если введено число. Класс-исключение
# должен не позволить пользователю ввести текст (не число) и отобразить соответствующее
# сообщение. При этом работа скрипта не должна завершаться.


class NumCheck(Exception):
    # def __init__(self, text):
    # self.text = text
    pass


el_list = []
while True:
    try:
        el = input('Введите элемент списка (число): ')
        if el == 'stop':
            print(f'Работа скрипта остановлена. Сформирован список: {el_list}')
            break
        elif not el.isdigit():
            raise NumCheck("Вы ввели не число")
        # код который может вызвать исключительную ситуацию
    except NumCheck as err:
        print(err)
        # что делать если возникла исключительная ситуация
    else:
        el = int(el)
        el_list.append(el)
        # что делать если ошибок не было
    # finally:
    # выполняется всегда
